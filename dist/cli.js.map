{"version":3,"sources":["../src/cli.ts","../src/index-models.ts","../src/pinecone.ts","../src/openai.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { Command } from 'commander';\r\nimport * as dotenv from 'dotenv';\r\nimport { indexModels } from './index-models';\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\nconst program = new Command();\r\n\r\nprogram\r\n  .name('autorouter-sdk')\r\n  .description('AutoRouter SDK - AI model selection toolkit')\r\n  .version('1.0.0');\r\n\r\nprogram\r\n  .command('index-models')\r\n  .description('Index models from registry into Pinecone')\r\n  .option('-o, --openai-key <key>', 'OpenAI API key (or use OPENAI_API_KEY env var)')\r\n  .option('-p, --pinecone-key <key>', 'Pinecone API key (or use PINECONE_API_KEY env var)')\r\n  .option('-i, --index-name <name>', 'Pinecone index name', 'autorouter-models')\r\n  .option('-r, --registry-path <path>', 'Path to model registry JSON file')\r\n  .action(async (options) => {\r\n    const openaiKey = options.openaiKey || process.env.OPENAI_API_KEY;\r\n    const pineconeKey = options.pineconeKey || process.env.PINECONE_API_KEY;\r\n    const indexName = options.indexName || 'autorouter-models';\r\n\r\n    if (!openaiKey) {\r\n      console.error('‚ùå OpenAI API key is required. Set OPENAI_API_KEY or use --openai-key');\r\n      process.exit(1);\r\n    }\r\n\r\n    if (!pineconeKey) {\r\n      console.error('‚ùå Pinecone API key is required. Set PINECONE_API_KEY or use --pinecone-key');\r\n      process.exit(1);\r\n    }\r\n\r\n    console.log('üîë Using OpenAI key:', openaiKey.substring(0, 10) + '...');\r\n    console.log('üîë Using Pinecone key:', pineconeKey.substring(0, 10) + '...');\r\n    console.log('üìù Index name:', indexName);\r\n    console.log('');\r\n\r\n    try {\r\n      await indexModels(openaiKey, pineconeKey, indexName, options.registryPath);\r\n    } catch (error) {\r\n      console.error('Failed to index models:', error);\r\n      process.exit(1);\r\n    }\r\n  });\r\n\r\nprogram.parse();\r\n\r\n","import fs from 'fs';\r\nimport path from 'path';\r\nimport { getPineconeIndex } from './pinecone';\r\nimport { generateEmbedding } from './openai';\r\nimport { HuggingFaceModel } from './types';\r\n\r\nfunction constructSearchableText(model: any): string {\r\n  const parts = [\r\n    model.id,\r\n    model.task || '',\r\n    model.description || '',\r\n    ...(model.tags || []),\r\n  ];\r\n  \r\n  return parts.filter(Boolean).join(' ').toLowerCase();\r\n}\r\n\r\nasync function loadModelsFromRegistry(registryPath: string): Promise<any[]> {\r\n  if (!fs.existsSync(registryPath)) {\r\n    console.error('Registry file not found. Please ensure model-registry.json exists.');\r\n    process.exit(1);\r\n  }\r\n\r\n  const registry = JSON.parse(fs.readFileSync(registryPath, 'utf-8'));\r\n  console.log(`Loaded ${registry.length} models from registry`);\r\n  \r\n  return registry;\r\n}\r\n\r\nexport async function indexModels(\r\n  openaiKey: string,\r\n  pineconeKey: string,\r\n  pineconeIndexName: string,\r\n  registryPath?: string\r\n) {\r\n  console.log('Starting model indexing...');\r\n  \r\n  // Get registry path\r\n  if (!registryPath) {\r\n    // Try multiple possible locations\r\n    const possiblePaths = [\r\n      path.join(__dirname, '..', 'data', 'model-registry.json'),\r\n      path.join(process.cwd(), 'data', 'model-registry.json'),\r\n      path.join(process.cwd(), 'node_modules', 'autorouter-sdk', 'data', 'model-registry.json'),\r\n    ];\r\n    \r\n    for (const possiblePath of possiblePaths) {\r\n      if (fs.existsSync(possiblePath)) {\r\n        registryPath = possiblePath;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!registryPath) {\r\n      console.error('Registry file not found. Please ensure model-registry.json exists.');\r\n      console.error('Tried:', possiblePaths);\r\n      process.exit(1);\r\n    }\r\n  }\r\n\r\n  const index = getPineconeIndex(pineconeKey, pineconeIndexName);\r\n  let totalIndexed = 0;\r\n\r\n  // Load models from registry file\r\n  const allModels = await loadModelsFromRegistry(registryPath);\r\n\r\n  // Show statistics\r\n  console.log(`\\nTotal models to index: ${allModels.length}`);\r\n  console.log(`\\nTop 10 models by downloads:`);\r\n  allModels.slice(0, 10).forEach((model, i) => {\r\n    console.log(`  ${i + 1}. ${model.id} - ${model.downloads.toLocaleString()} downloads (${model.task || 'unknown'})`);\r\n  });\r\n\r\n  console.log(`\\nProcessing ${allModels.length} models...`);\r\n\r\n  // Now index the models\r\n  for (const model of allModels) {\r\n    try {\r\n      // Construct searchable text from registry data\r\n      const searchableText = constructSearchableText(model);\r\n\r\n      if (!searchableText.trim()) {\r\n        console.log(`Skipping ${model.id} - no searchable content`);\r\n        continue;\r\n      }\r\n\r\n      // Generate embedding\r\n      const embedding = await generateEmbedding(openaiKey, searchableText);\r\n\r\n      // Prepare metadata\r\n      const metadata = {\r\n        id: model.id,\r\n        name: model.name || model.id.split('/')[1] || model.id,\r\n        description: model.description || '',\r\n        task: model.task || 'unknown',\r\n        provider: 'huggingface',\r\n        license: model.license || 'unknown',\r\n        downloads: model.downloads,\r\n        endpoint: model.endpoint || `https://api-inference.huggingface.co/models/${model.id}`,\r\n      };\r\n\r\n      // Upsert to Pinecone\r\n      await index.upsert([\r\n        {\r\n          id: model.id,\r\n          values: embedding,\r\n          metadata,\r\n        },\r\n      ]);\r\n\r\n      totalIndexed++;\r\n      if (totalIndexed % 10 === 0) {\r\n        console.log(`Progress: ${totalIndexed}/${allModels.length} models indexed`);\r\n      }\r\n\r\n      // Rate limiting - small delay between requests\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n      \r\n    } catch (error) {\r\n      console.error(`Error processing model ${model.id}:`, error);\r\n    }\r\n  }\r\n\r\n  console.log(`\\nIndexing complete! Total models indexed: ${totalIndexed}`);\r\n}\r\n\r\n","import { Pinecone } from '@pinecone-database/pinecone';\r\n\r\nexport const getPineconeClient = (apiKey: string) => {\r\n  return new Pinecone({\r\n    apiKey,\r\n  });\r\n};\r\n\r\nexport const getPineconeIndex = (apiKey: string, indexName: string) => {\r\n  const client = getPineconeClient(apiKey);\r\n  return client.index(indexName);\r\n};\r\n\r\n","import OpenAI from 'openai';\r\n\r\nexport const getOpenAIClient = (apiKey: string) => {\r\n  return new OpenAI({\r\n    apiKey,\r\n  });\r\n};\r\n\r\nexport const generateEmbedding = async (apiKey: string, text: string): Promise<number[]> => {\r\n  const client = getOpenAIClient(apiKey);\r\n  const response = await client.embeddings.create({\r\n    model: 'text-embedding-3-large',\r\n    input: text,\r\n  });\r\n  return response.data[0].embedding;\r\n};\r\n\r\n"],"mappings":"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","names":["OpenAI","fs","path"]}