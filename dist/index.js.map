{"version":3,"sources":["../src/index.ts","../src/pinecone.ts","../src/openai.ts"],"sourcesContent":["import { ModelResult, SearchOptions, AutoRouterConfig } from './types';\r\nimport { getPineconeIndex } from './pinecone';\r\nimport { generateEmbedding } from './openai';\r\n\r\nexport class AutoRouter {\r\n  private openaiKey: string;\r\n  private pineconeKey: string;\r\n  private pineconeIndexName: string;\r\n\r\n  constructor(config: AutoRouterConfig) {\r\n    this.openaiKey = config.openaiKey;\r\n    this.pineconeKey = config.pineconeKey;\r\n    this.pineconeIndexName = config.pineconeIndexName || 'autorouter-models';\r\n  }\r\n\r\n  async selectModel(\r\n    query: string,\r\n    options?: SearchOptions\r\n  ): Promise<ModelResult[]> {\r\n    try {\r\n      // Generate embedding for the query\r\n      const queryEmbedding = await generateEmbedding(this.openaiKey, query);\r\n\r\n      // Get Pinecone index\r\n      const index = getPineconeIndex(this.pineconeKey, this.pineconeIndexName);\r\n\r\n      // Build filter for Pinecone\r\n      const pineconeFilter: Record<string, { $eq: string }> = {};\r\n      if (options?.filter?.license) {\r\n        pineconeFilter.license = { $eq: options.filter.license };\r\n      }\r\n\r\n      // Query Pinecone\r\n      const queryResponse = await index.query({\r\n        vector: queryEmbedding,\r\n        topK: options?.limit || 10,\r\n        includeMetadata: true,\r\n        filter: Object.keys(pineconeFilter).length > 0 ? pineconeFilter : undefined,\r\n      });\r\n\r\n      // Transform results to ModelResult format\r\n      const models: ModelResult[] = queryResponse.matches?.map((match) => ({\r\n        id: match.metadata?.id as string,\r\n        name: match.metadata?.name as string,\r\n        description: match.metadata?.description as string,\r\n        task: match.metadata?.task as string,\r\n        provider: match.metadata?.provider as string,\r\n        license: match.metadata?.license as string,\r\n        downloads: match.metadata?.downloads as number,\r\n        score: match.score || 0,\r\n        endpoint: match.metadata?.endpoint as string,\r\n      })) || [];\r\n\r\n      return models;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('Failed to select model');\r\n    }\r\n  }\r\n}\r\n\r\nexport { ModelResult, SearchOptions, AutoRouterConfig } from './types';\r\n","import { Pinecone } from '@pinecone-database/pinecone';\r\n\r\nexport const getPineconeClient = (apiKey: string) => {\r\n  return new Pinecone({\r\n    apiKey,\r\n  });\r\n};\r\n\r\nexport const getPineconeIndex = (apiKey: string, indexName: string) => {\r\n  const client = getPineconeClient(apiKey);\r\n  return client.index(indexName);\r\n};\r\n\r\n","import OpenAI from 'openai';\r\n\r\nexport const getOpenAIClient = (apiKey: string) => {\r\n  return new OpenAI({\r\n    apiKey,\r\n  });\r\n};\r\n\r\nexport const generateEmbedding = async (apiKey: string, text: string): Promise<number[]> => {\r\n  const client = getOpenAIClient(apiKey);\r\n  const response = await client.embeddings.create({\r\n    model: 'text-embedding-3-large',\r\n    input: text,\r\n  });\r\n  return response.data[0].embedding;\r\n};\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,sBAAyB;AAElB,IAAM,oBAAoB,CAAC,WAAmB;AACnD,SAAO,IAAI,yBAAS;AAAA,IAClB;AAAA,EACF,CAAC;AACH;AAEO,IAAM,mBAAmB,CAAC,QAAgB,cAAsB;AACrE,QAAM,SAAS,kBAAkB,MAAM;AACvC,SAAO,OAAO,MAAM,SAAS;AAC/B;;;ACXA,oBAAmB;AAEZ,IAAM,kBAAkB,CAAC,WAAmB;AACjD,SAAO,IAAI,cAAAA,QAAO;AAAA,IAChB;AAAA,EACF,CAAC;AACH;AAEO,IAAM,oBAAoB,OAAO,QAAgB,SAAoC;AAC1F,QAAM,SAAS,gBAAgB,MAAM;AACrC,QAAM,WAAW,MAAM,OAAO,WAAW,OAAO;AAAA,IAC9C,OAAO;AAAA,IACP,OAAO;AAAA,EACT,CAAC;AACD,SAAO,SAAS,KAAK,CAAC,EAAE;AAC1B;;;AFXO,IAAM,aAAN,MAAiB;AAAA,EAKtB,YAAY,QAA0B;AACpC,SAAK,YAAY,OAAO;AACxB,SAAK,cAAc,OAAO;AAC1B,SAAK,oBAAoB,OAAO,qBAAqB;AAAA,EACvD;AAAA,EAEA,MAAM,YACJ,OACA,SACwB;AACxB,QAAI;AAEF,YAAM,iBAAiB,MAAM,kBAAkB,KAAK,WAAW,KAAK;AAGpE,YAAM,QAAQ,iBAAiB,KAAK,aAAa,KAAK,iBAAiB;AAGvE,YAAM,iBAAkD,CAAC;AACzD,UAAI,SAAS,QAAQ,SAAS;AAC5B,uBAAe,UAAU,EAAE,KAAK,QAAQ,OAAO,QAAQ;AAAA,MACzD;AAGA,YAAM,gBAAgB,MAAM,MAAM,MAAM;AAAA,QACtC,QAAQ;AAAA,QACR,MAAM,SAAS,SAAS;AAAA,QACxB,iBAAiB;AAAA,QACjB,QAAQ,OAAO,KAAK,cAAc,EAAE,SAAS,IAAI,iBAAiB;AAAA,MACpE,CAAC;AAGD,YAAM,SAAwB,cAAc,SAAS,IAAI,CAAC,WAAW;AAAA,QACnE,IAAI,MAAM,UAAU;AAAA,QACpB,MAAM,MAAM,UAAU;AAAA,QACtB,aAAa,MAAM,UAAU;AAAA,QAC7B,MAAM,MAAM,UAAU;AAAA,QACtB,UAAU,MAAM,UAAU;AAAA,QAC1B,SAAS,MAAM,UAAU;AAAA,QACzB,WAAW,MAAM,UAAU;AAAA,QAC3B,OAAO,MAAM,SAAS;AAAA,QACtB,UAAU,MAAM,UAAU;AAAA,MAC5B,EAAE,KAAK,CAAC;AAER,aAAO;AAAA,IACT,SAAS,OAAO;AACd,UAAI,iBAAiB,OAAO;AAC1B,cAAM;AAAA,MACR;AACA,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC1C;AAAA,EACF;AACF;","names":["OpenAI"]}