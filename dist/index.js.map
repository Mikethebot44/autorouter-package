{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { ModelResult, SearchOptions, SearchResponse, AutoRouterConfig } from './types';\r\n\r\nexport class AutoRouter {\r\n  private apiKey: string;\r\n  private baseUrl: string;\r\n\r\n  constructor(config: AutoRouterConfig) {\r\n    this.apiKey = config.apiKey;\r\n    this.baseUrl = config.baseUrl || 'https://autorouter-server.vercel.app';\r\n  }\r\n\r\n  async selectModel(\r\n    query: string,\r\n    options?: SearchOptions\r\n  ): Promise<ModelResult[]> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/api/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          query,\r\n          limit: options?.limit,\r\n          filter: options?.filter,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          throw new Error('Invalid API key');\r\n        }\r\n        if (response.status === 400) {\r\n          const error = await response.json();\r\n          throw new Error(error.error || 'Bad request');\r\n        }\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data: SearchResponse = await response.json();\r\n      return data.models;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('Network error occurred');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Health check method to verify the service is running\r\n   */\r\n  async healthCheck(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/api/health`);\r\n      return response.ok;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,IAAM,aAAN,MAAiB;AAAA,EAItB,YAAY,QAA0B;AACpC,SAAK,SAAS,OAAO;AACrB,SAAK,UAAU,OAAO,WAAW;AAAA,EACnC;AAAA,EAEA,MAAM,YACJ,OACA,SACwB;AACxB,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,GAAG,KAAK,OAAO,eAAe;AAAA,QACzD,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,iBAAiB,UAAU,KAAK,MAAM;AAAA,QACxC;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB;AAAA,UACA,OAAO,SAAS;AAAA,UAChB,QAAQ,SAAS;AAAA,QACnB,CAAC;AAAA,MACH,CAAC;AAED,UAAI,CAAC,SAAS,IAAI;AAChB,YAAI,SAAS,WAAW,KAAK;AAC3B,gBAAM,IAAI,MAAM,iBAAiB;AAAA,QACnC;AACA,YAAI,SAAS,WAAW,KAAK;AAC3B,gBAAM,QAAQ,MAAM,SAAS,KAAK;AAClC,gBAAM,IAAI,MAAM,MAAM,SAAS,aAAa;AAAA,QAC9C;AACA,cAAM,IAAI,MAAM,uBAAuB,SAAS,MAAM,EAAE;AAAA,MAC1D;AAEA,YAAM,OAAuB,MAAM,SAAS,KAAK;AACjD,aAAO,KAAK;AAAA,IACd,SAAS,OAAO;AACd,UAAI,iBAAiB,OAAO;AAC1B,cAAM;AAAA,MACR;AACA,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC1C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAgC;AACpC,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,GAAG,KAAK,OAAO,aAAa;AACzD,aAAO,SAAS;AAAA,IAClB,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AACF;","names":[]}